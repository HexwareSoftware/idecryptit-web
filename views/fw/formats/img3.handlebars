{{> nav navFirmware=true}}

<div class="container-fluid">
    {{{breadcrumbs
        (arr "Firmware Files" "/fw/files")
        "IMG3"
    }}}

    <div class="row">
        <div class="col-lg-2 col-md-3">
            {{{toc
                (arr "#headingProblems" "Problems With IMG2")
                (arr "#headingStructure" "File Structure")
                (arr "#headingTags" "Tags"
                    (arr "#headingTagsList" "List of Different Tags")
                    (arr "#headingTagsFormat" "Tag Format"))
                (arr "#headingFormat" "File Format")
            }}}
        </div>

        <div class="col-lg-10 col-md-9">
            <h1>IMG3</h1>
            <p>
                Initially used in iPhone OS 2.0 beta 4, IMG3 files were created to address some of the problems with the older {{{link "/fw/formats/8900" "8900"}}} and {{{link "/fw/formats/img2" "IMG2"}}} formats.
                This format is used on all devices using 32-bit processors ({{{link "/processors/s5l8955" "S5L8955"}}} (A6X) or lower).
                All 64-bit processors ({{{link "/processors/s5l8960" "S5L8960"}}} (A7) and newer) use the {{{link "/fw/formats/img4" "IMG4"}}} format.
            </p>

            <h2 id="headingProblems">Problems With IMG2</h2>
            <p>
                The biggest problem with the {{{link "/fw/formats/8900" "8900"}}} and the {{{link "/fw/formats/img2" "IMG2"}}} formats was that they were all encrypted with the same key: {{{link "/processors/s5l8900#headingKeys" "Key 0x837"}}}.
                IMG3 addressed this glaring security hole by storing the encryption keys for each file inside that file (but encrypted).
                This means that a single key can only decrypt a single file.
            </p>

            <h2 id="headingStructure">File Structure</h2>
            <p>
                The IMG3 file format's header is a lot more compact than previous formats.
                It consists of a "magic," some info about the file size, an offset to the <code>SHSH</code> tag, and an identifier.
            </p>
            <p>
                The encryption keys for the file's data are stored in the <code>KBAG</code> tag (see {{{link "#headingTags" "below"}}} for what a tag is).
            </p>

            <h2 id="headingTags">Tags</h2>
            <p>
                An IMG3 file consists of a series of "tags," one after the other.
                A tag consists of a "magic," some info about the tag size, the possibly encrypted data, and padding.
                For the <code>KBAG</code> tag, its data is encrypted with the GID Key (a key unique to each processor version).
                For the <code>DATA</code> tag, its data is encrypted with the IV and key stored in the <code>KBAG</code> tag.
                All other tags are unencrypted as far as is known.
            </p>

            <h3 id="headingTagsList">List of Different Tags</h3>
            <p>
                There exist many different tags:
            </p>
            <ul>
                <li>{{{link "/fw/formats/img3/bord" "<code>BORD</code>"}}}: Board to be used with</li>
                <li>{{{link "/fw/formats/img3/cert" "<code>CERT</code>"}}}: Certificate</li>
                <li>{{{link "/fw/formats/img3/cepo" "<code>CEPO</code>"}}}: Chip epoch</li>
                <li>{{{link "/fw/formats/img3/chip" "<code>CHIP</code>"}}}: Chip to be used with</li>
                <li>{{{link "/fw/formats/img3/data" "<code>DATA</code>"}}}: Payload of the file</li>
                <li>{{{link "/fw/formats/img3/ecid" "<code>ECID</code>"}}}: Exclusive chip ID</li>
                <li>{{{link "/fw/formats/img3/kbag" "<code>KBAG</code>"}}}: Contains the IV and key required to decrypt the <code>DATA</code> tag</li>
                <li>{{{link "/fw/formats/img3/cepo" "<code>NONC</code>"}}}: Nonce used when the file was signed</li>
                <li>{{{link "/fw/formats/img3/ovrd" "<code>OVRD</code>"}}}</li>
                <li>{{{link "/fw/formats/img3/prod" "<code>PROD</code>"}}}: Production mode</li>
                <li>{{{link "/fw/formats/img3/rand" "<code>RAND</code>"}}}</li>
                <li>{{{link "/fw/formats/img3/salt" "<code>SALT</code>"}}}</li>
                <li>{{{link "/fw/formats/img3/sdom" "<code>SDOM</code>"}}}: Security domain</li>
                <li>{{{link "/fw/formats/img3/sepo" "<code>SEPO</code>"}}}: Security epoch</li>
                <li>{{{link "/fw/formats/img3/shsh" "<code>SHSH</code>"}}}: Encrypted hash of the file</li>
                <li>{{{link "/fw/formats/img3/type" "<code>TYPE</code>"}}}: Type of image; should contain the same string as the <code>ident</code> field in the header</li>
                <li>{{{link "/fw/formats/img3/vers" "<code>VERS</code>"}}}: iBoot version of the image</li>
            </ul>

            <h3 id="headingTagsFormat">Tag Format</h3>
            <div class="alert alert-primary" role="alert">
                All file offsets are in hexadecimal, and all values are stored in little endian.
            </div>
            <pre>
Img3Tag {
   0  uint32  magic;
   4  uint32  totalLength; // including padding and header
   8  uint32  dataLength;
   C  uint8[] data;        // sizeof(data) == dataLength
????  uint8[] pad;         // sizeof(pad) == totalLength - dataLength - 12
}</pre>

            <h2 id="headingFormat">File Format</h2>
            <div class="alert alert-primary" role="alert">
                All file offsets are in hexadecimal, and all values are stored in little endian.
            </div>
            <pre>
Img3 {
    0  uint32    magic;    // "3gmI" ("Img3" in little endian)
    4  uint32    fileSize;
    8  uint32    tagsSize; // size of file without 0x14 header
    C  uint32    shshTagOffset;
   10  uint32    ident;    // appears to be the same as the TYPE tag's data/value
   14  Img3Tag[] tags;
}</pre>
        </div>
    </div>
</div>

{{> footer}}