{{> nav navFirmware=true}}

<div class="container-fluid">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/fw/files">Firmware Files</a></li>
            <li class="breadcrumb-item active" aria-current="page">8900</li>
        </ol>
    </nav>
    <div class="row">
        <div class="col-sm-2">
            <div id="toc">
                <div id="tocTitle">Contents</div>
                <ul>
                    <li>1. <a href="#headingFormat">File Format</a></li>
                </ul>
            </div>
        </div>

        <div class="col-sm-10">
            <h1>8900</h1>
            <p>
                So called due to their use on the <a href="/processors/s5l8900">S5L8900 processor</a>, 8900 files are very basic.
                Their usage was, as far as is known, to simply to provide a wrapper for <a href="/fw/formats/img2">IMG2</a> and <a href="/fw/formats/dmg">DMG</a> files.
                They can only be parsed by <a href="/fw/files/iBoot">iBoot</a>-304 or earlier and the <a href="/processors/s5l8900">S5L8900</a>.
                Later processors have no support for this format.
            </p>

            <h2 id="headingFormat">File Format</h2>
            <div class="alert alert-primary" role="alert">
                All file offsets are in hexadecimal, and all values except <code>magic</code> and <code>version</code> are stored in little endian.
            </div>
            <pre>
Apple8900 {
   0  uint8[4]  magic;   // "8900" in big endian
   4  uint8[3]  version; // "1.0" in big endian
   7  uint8     format;  // 0x1: boot payload encrypted with UID key
                         // 0x2: unencrypted boot payload
                         // 0x3: payload encrypted with <a href="/processors/s5l8900#headerKeys">Key 0x837</a>
                         // 0x4: unencrypted payload
   8  uint32;
   C  uint32    payloadLength;
  10  uint32    footerSigOffset;  // ignoring header
  14  uint32    footerCertOffset; // ignoring header
  18  uint32    footerCertLength;
  1C  uint8[32] salt;
  3C  uint16;
  3E  uint16    epoch;
  40  uint8[16] headerSig;  // aes128cbc(sha1(file[0:0x40])[0:0x10], Key0x837, ZeroIV)
  50  uint8[0x7B0] pad;
 800  uint8[]   payload;    // sizeof(payload) == payloadLength
????  uint8[]   footerSig;  // sizeof(footerSig) == footerCertOffset - footerSigOffset
????  uint8[]   footerCert; // sizeof(footerCert) == footerCertLength
}</pre>
        </div>
    </div>
</div>

{{> footer}}